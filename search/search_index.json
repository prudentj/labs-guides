{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 These guides will provide guidance that Labs teams working in Lambda X can use to accomplish various tasks. Adherence to these standards are critical to the continued success of the Lambda X organization, as they allow us to more effectively manage the scores of teams working across hundreds of products. Guides \u00b6 The guides will be devided into separate categories. A category corresponds to a specific area of concern in the engineering standards. The categories can all be viewed in the menu at the top of the page. Completeness \u00b6 These guides do not cover all possibilities. Many are purposely omitted so as to require the individuals and teams in Labs to discover their own solutions. When in doubt, please open an issue or submit a PR to start a discussion. Contributing \u00b6 These guides will morph over time as we adapt to the ever-changing technology landscape. In addition, the guides will embrace a subset of all of aspects of the Labs experience, so that teams have some general guidance. In order to ensure that these guides are inclusive of the needs of all Labs groups, each new standard or change to an existing standard will be ratified by approval from 3 Labs Tech Leads. Guide Standards","title":"Home"},{"location":"#overview","text":"These guides will provide guidance that Labs teams working in Lambda X can use to accomplish various tasks. Adherence to these standards are critical to the continued success of the Lambda X organization, as they allow us to more effectively manage the scores of teams working across hundreds of products.","title":"Overview"},{"location":"#guides","text":"The guides will be devided into separate categories. A category corresponds to a specific area of concern in the engineering standards. The categories can all be viewed in the menu at the top of the page.","title":"Guides"},{"location":"#completeness","text":"These guides do not cover all possibilities. Many are purposely omitted so as to require the individuals and teams in Labs to discover their own solutions. When in doubt, please open an issue or submit a PR to start a discussion.","title":"Completeness"},{"location":"#contributing","text":"These guides will morph over time as we adapt to the ever-changing technology landscape. In addition, the guides will embrace a subset of all of aspects of the Labs experience, so that teams have some general guidance. In order to ensure that these guides are inclusive of the needs of all Labs groups, each new standard or change to an existing standard will be ratified by approval from 3 Labs Tech Leads. Guide Standards","title":"Contributing"},{"location":"topics/aws-amplify-deploy/","text":"AWS Amplify - Deploy Frontend React App \u00b6 A walk through of one of the coolest new deployment platforms out there, Lab Standards compliant AWS Amplify. Objective \u00b6 We will walk through the deployment of a front end react app on AWS Amplify, one of the approved services in the Labs Standards . The deployment will have automatic deploys upon merge to master. In addition we will cover the steps to setup Previews that will be generated when a PR is created. Technologies \u00b6 AWS Management Cosole github.com References \u00b6 AWS Amplify Pre-requsites \u00b6 You will need to have an AWS account a github.com account Setup master deployment \u00b6 create a blank github repo create a base react app using create-react-app > npx create-react-app awesomeness-aws-app > cd awesomeness-aws-app Initialize the git repo and set origin to the new repo > git init > git remote add origin <new repo url> Initialize the react project and confirm it works > yarn; yarn start; open http://localhost:3000 Push the repo to github > git push origin master Open the AWS Amplify console and connect an app. Choose to connect existing code from github and enter your master branch Info You will need to authorize aws with github to gain access. This is similar to services like netlify and Heroku. Save the default settings and watch the deploy open your browser to the url amplify setup for you to confirm you have a Labs Standards compliant site running. \ud83c\udf89 Setup Previews \u00b6 Similar to Heroku Review apps AWS Amplify can create resources to serve up your app based on a PR. Open Previews from the side bar Click to enable Previews Warning You will need to install a Github app to enable previews. Either your SL or Engineering Manager will need to do this for you repo. After installing the github app open the preview for master branch and enable PR previews All set. Now go commit a change to your project and push to a new branch so you can create a PR. You should see a \"github check\" for AWS Amplify Console Web Preview in your PR Conversation view. It will take a few minutes to create your app in AWS but when it's done a link to the site will appear in the previews list. Open the PR url and see your changes live. When you merge your PR AWS Amplify will destroy the preview and automagically deploy master to the production resources. \ud83c\udf89\ud83c\udf89 A video walk-through of this entire process \u00b6","title":"AWS Amplify Frontend"},{"location":"topics/aws-amplify-deploy/#aws-amplify-deploy-frontend-react-app","text":"A walk through of one of the coolest new deployment platforms out there, Lab Standards compliant AWS Amplify.","title":"AWS Amplify - Deploy Frontend React App"},{"location":"topics/aws-amplify-deploy/#objective","text":"We will walk through the deployment of a front end react app on AWS Amplify, one of the approved services in the Labs Standards . The deployment will have automatic deploys upon merge to master. In addition we will cover the steps to setup Previews that will be generated when a PR is created.","title":"Objective"},{"location":"topics/aws-amplify-deploy/#technologies","text":"AWS Management Cosole github.com","title":"Technologies"},{"location":"topics/aws-amplify-deploy/#references","text":"AWS Amplify","title":"References"},{"location":"topics/aws-amplify-deploy/#pre-requsites","text":"You will need to have an AWS account a github.com account","title":"Pre-requsites"},{"location":"topics/aws-amplify-deploy/#setup-master-deployment","text":"create a blank github repo create a base react app using create-react-app > npx create-react-app awesomeness-aws-app > cd awesomeness-aws-app Initialize the git repo and set origin to the new repo > git init > git remote add origin <new repo url> Initialize the react project and confirm it works > yarn; yarn start; open http://localhost:3000 Push the repo to github > git push origin master Open the AWS Amplify console and connect an app. Choose to connect existing code from github and enter your master branch Info You will need to authorize aws with github to gain access. This is similar to services like netlify and Heroku. Save the default settings and watch the deploy open your browser to the url amplify setup for you to confirm you have a Labs Standards compliant site running. \ud83c\udf89","title":"Setup master deployment"},{"location":"topics/aws-amplify-deploy/#setup-previews","text":"Similar to Heroku Review apps AWS Amplify can create resources to serve up your app based on a PR. Open Previews from the side bar Click to enable Previews Warning You will need to install a Github app to enable previews. Either your SL or Engineering Manager will need to do this for you repo. After installing the github app open the preview for master branch and enable PR previews All set. Now go commit a change to your project and push to a new branch so you can create a PR. You should see a \"github check\" for AWS Amplify Console Web Preview in your PR Conversation view. It will take a few minutes to create your app in AWS but when it's done a link to the site will appear in the previews list. Open the PR url and see your changes live. When you merge your PR AWS Amplify will destroy the preview and automagically deploy master to the production resources. \ud83c\udf89\ud83c\udf89","title":"Setup Previews"},{"location":"topics/aws-amplify-deploy/#a-video-walk-through-of-this-entire-process","text":"","title":"A video walk-through of this entire process"},{"location":"topics/eslint-prettier-setup/","text":"Setting Up ESLint And Prettier \u00b6 Objective \u00b6 Setting up linters and code formatters is really important to group projects. When people are doing things like using different kinds of quotes, or people are following different semicolon rules, code can become a confusing mess real quick. Adding things like code formatters and linters can be really beneficial to building a uniform and readable code base. This guide aims to help you easily set these things up in your groups project. Technologies Discussed \u00b6 ESLint Prettier References \u00b6 ESLint Docs ESLint VS Code Extension Prettier Docs Prettier VS Code Extension Install ESLint and Prettier VS Code Extensions \u00b6 Make sure every team member has prettier and eslint VS Code extension's installed. Info It's recommended to turn format on save on. Click on prettier link above and search for \"Format On Save\" for instructions on setting that up in vs code. Also, check out section \"Linter Integration\". \ud83d\udd25 Configure ESLint and Prettier \u00b6 Now we need to add dependencies to our project with some rc files! Woo hoo! \ud83d\udc4f In the root of your project's directory run; yarn add eslint prettier eslint-config-prettier eslint-plugin-prettier or npm i eslint prettier eslint-config-prettier eslint-plugin-prettier . Note For react apps, add eslint-plugin-react to dependencies as well! Then we can add a file named .eslintrc.js with the following content for a react app. Example React Config \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 module . exports = { env : { commonjs : true , browser : true , es6 : true , node : true , }, extends : [ \"eslint:recommended\" , \"plugin:react/recommended\" , \"plugin:prettier/recommended\" , ], parserOptions : { ecmaFeatures : { jsx : true , }, ecmaVersion : 2018 , sourceType : \"module\" , }, plugins : [ \"react\" , \"prettier\" ], rules : {}, overrides : [ { files : [ \"**/*.test.js\" ], env : { jest : true , }, }, ], }; Example Node Config \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { env : { node : true , commonjs : true , es6 : true , }, extends : [ \"eslint:recommended\" , \"plugin:prettier/recommended\" ], parserOptions : { ecmaFeatures : { ecmaVersion : 2018 , sourceType : \"module\" , }, plugins : [ \"prettier\" ], rules : {}, overrides : [ { files : [ \"**/*.test.js\" ], env : { jest : true , }, }, ], }; By adding .prettierrc.js to our root with the following content for both React and Node projects, then the whole team will have shared formatter rules. 1 2 3 4 5 6 module . exports = { trailingComma : \"es5\" , tabWidth : 2 , semi : true , singleQuote : true , }; Then we can add some scripts to our package.json . 1 2 3 4 5 6 7 { \"scripts\" : { \"lint\" : \"eslint .\" , \"lint:fix\" : \"eslint --fix .\" , \"format\" : \"prettier --write \\\"**/*.+(js|jsx|json|yml|yaml|css|md)\\\"\" } } Conclusion \u00b6 Setting up ESLint and Prettier in your projects can go a long way in helping you write better, more readable code. Even more so when your working in a team environment. You may have noticed that the \"rules\" key's where empty in the .eslintrc examples. ESLint does a lot by default but if you want more in-depth, fine grain control over the coding style for your project visit their docs on rules here!","title":"ESLint and Prettier"},{"location":"topics/eslint-prettier-setup/#setting-up-eslint-and-prettier","text":"","title":"Setting Up ESLint And Prettier"},{"location":"topics/eslint-prettier-setup/#objective","text":"Setting up linters and code formatters is really important to group projects. When people are doing things like using different kinds of quotes, or people are following different semicolon rules, code can become a confusing mess real quick. Adding things like code formatters and linters can be really beneficial to building a uniform and readable code base. This guide aims to help you easily set these things up in your groups project.","title":"Objective"},{"location":"topics/eslint-prettier-setup/#technologies-discussed","text":"ESLint Prettier","title":"Technologies Discussed"},{"location":"topics/eslint-prettier-setup/#references","text":"ESLint Docs ESLint VS Code Extension Prettier Docs Prettier VS Code Extension","title":"References"},{"location":"topics/eslint-prettier-setup/#install-eslint-and-prettier-vs-code-extensions","text":"Make sure every team member has prettier and eslint VS Code extension's installed. Info It's recommended to turn format on save on. Click on prettier link above and search for \"Format On Save\" for instructions on setting that up in vs code. Also, check out section \"Linter Integration\". \ud83d\udd25","title":"Install ESLint and Prettier VS Code Extensions"},{"location":"topics/eslint-prettier-setup/#configure-eslint-and-prettier","text":"Now we need to add dependencies to our project with some rc files! Woo hoo! \ud83d\udc4f In the root of your project's directory run; yarn add eslint prettier eslint-config-prettier eslint-plugin-prettier or npm i eslint prettier eslint-config-prettier eslint-plugin-prettier . Note For react apps, add eslint-plugin-react to dependencies as well! Then we can add a file named .eslintrc.js with the following content for a react app.","title":"Configure ESLint and Prettier"},{"location":"topics/eslint-prettier-setup/#example-react-config","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 module . exports = { env : { commonjs : true , browser : true , es6 : true , node : true , }, extends : [ \"eslint:recommended\" , \"plugin:react/recommended\" , \"plugin:prettier/recommended\" , ], parserOptions : { ecmaFeatures : { jsx : true , }, ecmaVersion : 2018 , sourceType : \"module\" , }, plugins : [ \"react\" , \"prettier\" ], rules : {}, overrides : [ { files : [ \"**/*.test.js\" ], env : { jest : true , }, }, ], };","title":"Example React Config"},{"location":"topics/eslint-prettier-setup/#example-node-config","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 module . exports = { env : { node : true , commonjs : true , es6 : true , }, extends : [ \"eslint:recommended\" , \"plugin:prettier/recommended\" ], parserOptions : { ecmaFeatures : { ecmaVersion : 2018 , sourceType : \"module\" , }, plugins : [ \"prettier\" ], rules : {}, overrides : [ { files : [ \"**/*.test.js\" ], env : { jest : true , }, }, ], }; By adding .prettierrc.js to our root with the following content for both React and Node projects, then the whole team will have shared formatter rules. 1 2 3 4 5 6 module . exports = { trailingComma : \"es5\" , tabWidth : 2 , semi : true , singleQuote : true , }; Then we can add some scripts to our package.json . 1 2 3 4 5 6 7 { \"scripts\" : { \"lint\" : \"eslint .\" , \"lint:fix\" : \"eslint --fix .\" , \"format\" : \"prettier --write \\\"**/*.+(js|jsx|json|yml|yaml|css|md)\\\"\" } }","title":"Example Node Config"},{"location":"topics/eslint-prettier-setup/#conclusion","text":"Setting up ESLint and Prettier in your projects can go a long way in helping you write better, more readable code. Even more so when your working in a team environment. You may have noticed that the \"rules\" key's where empty in the .eslintrc examples. ESLint does a lot by default but if you want more in-depth, fine grain control over the coding style for your project visit their docs on rules here!","title":"Conclusion"},{"location":"topics/git-rebase-feature-branch/","text":"Rebasing a feature branch from master \u00b6 On occassion you'll find that you've been working on a feature branch and you need to merge in changes from master. This could just be a final step before you push a series of commits to github before creating a PR. These steps are similar to what the \"Rebase and Merge\" action does on github. Objective \u00b6 This guide will show you how to rebase (rebuild) a feature branch to begin at the current HEAD of the master branch. Think of it as if you are starting a new branch based on the current master and pasting all of your commits to the new branch. Warning Never rebase a branch that has already been pushed to a remote (public) repository, such as github; doing so will cause conflicts and confusion. Technologies \u00b6 git cli References \u00b6 The Pro Git book bitbucket tutorials Getting Started \u00b6 Make sure all changes are committed to your feature branch You will need to update your local master branch > git checkout master > git pull origin master Go back to your feature branch > git checkout feature-branch Now we can rebase the feature branch onto master 1 2 3 > git rebase master First, rewinding head to replay your work on top of it... Applying: added staged command Your commits will now show in the git log after the commits merged from master","title":"Rebasing a Feature Branch"},{"location":"topics/git-rebase-feature-branch/#rebasing-a-feature-branch-from-master","text":"On occassion you'll find that you've been working on a feature branch and you need to merge in changes from master. This could just be a final step before you push a series of commits to github before creating a PR. These steps are similar to what the \"Rebase and Merge\" action does on github.","title":"Rebasing a feature branch from master"},{"location":"topics/git-rebase-feature-branch/#objective","text":"This guide will show you how to rebase (rebuild) a feature branch to begin at the current HEAD of the master branch. Think of it as if you are starting a new branch based on the current master and pasting all of your commits to the new branch. Warning Never rebase a branch that has already been pushed to a remote (public) repository, such as github; doing so will cause conflicts and confusion.","title":"Objective"},{"location":"topics/git-rebase-feature-branch/#technologies","text":"git cli","title":"Technologies"},{"location":"topics/git-rebase-feature-branch/#references","text":"The Pro Git book bitbucket tutorials","title":"References"},{"location":"topics/git-rebase-feature-branch/#getting-started","text":"Make sure all changes are committed to your feature branch You will need to update your local master branch > git checkout master > git pull origin master Go back to your feature branch > git checkout feature-branch Now we can rebase the feature branch onto master 1 2 3 > git rebase master First, rewinding head to replay your work on top of it... Applying: added staged command Your commits will now show in the git log after the commits merged from master","title":"Getting Started"},{"location":"topics/git-workflow-basic/","text":"Lambda Labs Git Workflow \u00b6 We have some guidelines while you are working at Lambda Labs that will help reduce the friction of working in teams. Git is one of our most valued tools as developers. And as such we have put together the following guide regarding a workflow that will help keep you organized as well as save your butt from time to time. Objective \u00b6 We will walk through the basic steps of starting and finishing a feature or task in git and github.com. Technologies \u00b6 git cli github.com Pull Requests References \u00b6 git-scm.com Github Pull Requests Getting Started \u00b6 So you're ready to start work on a new trello card, Lets get started Info Obviously you can't do anything with git until you\u2019ve cloned the team repo. After that always make sure you start with a recent copy of the repo. 1 2 > git checkout master > git pull origin master So to get started on your first task let\u2019s make a branch. Making sure you are on the master branch, start a new branch with a name that matches or correlates to the task you are about to begin. The trick here is to think beyond yourself when naming the branch, stay aligned with your Trello board so you AND others can easily make sense of it. git checkout -b [new_branch_name] Sharing Is Good \u00b6 Now you have a branch to make all your awesome commits to. However, since you just had your team in mind while naming the branch, let\u2019s take a minute or two to do something extra nice for them. Lets us the \u201cEarly Pull Strategy\u201d to allow team members to follow along but not be nagged by our on going commits. This is done simply by pushing our new branch to the origin then create a draft PR in github. git push -u origin ${git_current_branch} or git push --set-upstream origin ${git_current_branch} Info The -u (--set-upstream) will save the tracking info for the remote branch to your git config. Yay. Now you can easily push your commits to the remote branch by git push. Easy. The next step is to create a draft PR (Pull Request) after you\u2019ve created your first commit . Github created this mode so that notifications will be turned off by default until you decide to turn off the draft and want to have the team give you a code review. Back when we traveled uphill both ways we called this a WIP, putting these initials at the beginning of the title and we\u2019d have to ignore notifications that had WIP in the title. \ud83e\udd2e Now we have it good. Making sure to use the template to provide a professional description (seriously copy the description from the trello card, right) summarizing the actual work in the PR, let\u2019s create a PR using the master branch as the base . We have lift off \u00b6 And just like that we\u2019re ready to make some awesome software. Committing and pushing our code regularly are the habits worth having. Before we know it, we\u2019ll be ready to take the PR out of draft mode. Tip Do your best to be a great team member by making commit messages as succinct as possible. They don\u2019t have to be elaborate, just to the point. One small step \u00b6 When you feel you\u2019ve completed the task you\u2019ve been working on it\u2019s time to update the description, take the PR out of draft mode and make it \u201cready for review\u201d . And just like that, the team will be notified of the PR and they can start a review and it can be merged. Tip Follow the team policy regarding the number of reviewers required before Merging It\u2019s really good practice to take the time to make comments in the code, even if they are positive notes on good work your teammate did. QA changes on stage before merging to master \u00b6 Since you branched off of master your PR should be tested on stage prior to approving and merging. If there are no issues found on stage and no conflicts to be resolved in the code choose \u201cRebase and merge\u201d or \"Squash and merge\" from the merge button and lets get onto master. If you find yourself with a merge conflict there are a number of ways to solve it. The github tools are very handy or you can do it locally. When going down the local path there is a good set of instructions at About pull request merges And now your code changes are on the master branch, ready to wow users with your updates. Deploy your code (if not automatically handled by github events) and be ready to support any issues that arise.","title":"The Labs Workflow"},{"location":"topics/git-workflow-basic/#lambda-labs-git-workflow","text":"We have some guidelines while you are working at Lambda Labs that will help reduce the friction of working in teams. Git is one of our most valued tools as developers. And as such we have put together the following guide regarding a workflow that will help keep you organized as well as save your butt from time to time.","title":"Lambda Labs Git Workflow"},{"location":"topics/git-workflow-basic/#objective","text":"We will walk through the basic steps of starting and finishing a feature or task in git and github.com.","title":"Objective"},{"location":"topics/git-workflow-basic/#technologies","text":"git cli github.com Pull Requests","title":"Technologies"},{"location":"topics/git-workflow-basic/#references","text":"git-scm.com Github Pull Requests","title":"References"},{"location":"topics/git-workflow-basic/#getting-started","text":"So you're ready to start work on a new trello card, Lets get started Info Obviously you can't do anything with git until you\u2019ve cloned the team repo. After that always make sure you start with a recent copy of the repo. 1 2 > git checkout master > git pull origin master So to get started on your first task let\u2019s make a branch. Making sure you are on the master branch, start a new branch with a name that matches or correlates to the task you are about to begin. The trick here is to think beyond yourself when naming the branch, stay aligned with your Trello board so you AND others can easily make sense of it. git checkout -b [new_branch_name]","title":"Getting Started"},{"location":"topics/git-workflow-basic/#sharing-is-good","text":"Now you have a branch to make all your awesome commits to. However, since you just had your team in mind while naming the branch, let\u2019s take a minute or two to do something extra nice for them. Lets us the \u201cEarly Pull Strategy\u201d to allow team members to follow along but not be nagged by our on going commits. This is done simply by pushing our new branch to the origin then create a draft PR in github. git push -u origin ${git_current_branch} or git push --set-upstream origin ${git_current_branch} Info The -u (--set-upstream) will save the tracking info for the remote branch to your git config. Yay. Now you can easily push your commits to the remote branch by git push. Easy. The next step is to create a draft PR (Pull Request) after you\u2019ve created your first commit . Github created this mode so that notifications will be turned off by default until you decide to turn off the draft and want to have the team give you a code review. Back when we traveled uphill both ways we called this a WIP, putting these initials at the beginning of the title and we\u2019d have to ignore notifications that had WIP in the title. \ud83e\udd2e Now we have it good. Making sure to use the template to provide a professional description (seriously copy the description from the trello card, right) summarizing the actual work in the PR, let\u2019s create a PR using the master branch as the base .","title":"Sharing Is Good"},{"location":"topics/git-workflow-basic/#we-have-lift-off","text":"And just like that we\u2019re ready to make some awesome software. Committing and pushing our code regularly are the habits worth having. Before we know it, we\u2019ll be ready to take the PR out of draft mode. Tip Do your best to be a great team member by making commit messages as succinct as possible. They don\u2019t have to be elaborate, just to the point.","title":"We have lift off"},{"location":"topics/git-workflow-basic/#one-small-step","text":"When you feel you\u2019ve completed the task you\u2019ve been working on it\u2019s time to update the description, take the PR out of draft mode and make it \u201cready for review\u201d . And just like that, the team will be notified of the PR and they can start a review and it can be merged. Tip Follow the team policy regarding the number of reviewers required before Merging It\u2019s really good practice to take the time to make comments in the code, even if they are positive notes on good work your teammate did.","title":"One small step"},{"location":"topics/git-workflow-basic/#qa-changes-on-stage-before-merging-to-master","text":"Since you branched off of master your PR should be tested on stage prior to approving and merging. If there are no issues found on stage and no conflicts to be resolved in the code choose \u201cRebase and merge\u201d or \"Squash and merge\" from the merge button and lets get onto master. If you find yourself with a merge conflict there are a number of ways to solve it. The github tools are very handy or you can do it locally. When going down the local path there is a good set of instructions at About pull request merges And now your code changes are on the master branch, ready to wow users with your updates. Deploy your code (if not automatically handled by github events) and be ready to support any issues that arise.","title":"QA changes on stage before merging to master"},{"location":"topics/github-trello-integration/","text":"Github and Trello Integration \u00b6 Objective \u00b6 This document will guide you through a step-by-step process to integrate your Trello board with Github. This integration will help you to keep track of your Pull Requests and issues within Trello. Technologies Discussed \u00b6 Github Trello References \u00b6 Github and Trello Note Use GitHub Power-Up for Trello for attaching pull requests, issues, branches, and more to respective cards. Note Color coded to identify status of the PR such as open, merged, failed checks. Note You can also associate multiple repositories to one board. This is useful in a case where you are working on both frontend and backend from the same board. Add Github Power-Up to your Trello board \u00b6 Add repository \u00b6 Attach your Pull Request to Trello card \u00b6 PR now shows on the card. Color coded to show status of pull request A comment linking back to Trello will be automatically added to your PR Conclusion \u00b6 Trello is a powerful but easy to use communication tool for your team. You can extend it's capabilities by further integrating your Github repository using other platforms such as Zapier to automatically create tasks from Github issues, among other features.","title":"Trello Integration"},{"location":"topics/github-trello-integration/#github-and-trello-integration","text":"","title":"Github and Trello Integration"},{"location":"topics/github-trello-integration/#objective","text":"This document will guide you through a step-by-step process to integrate your Trello board with Github. This integration will help you to keep track of your Pull Requests and issues within Trello.","title":"Objective"},{"location":"topics/github-trello-integration/#technologies-discussed","text":"Github Trello","title":"Technologies Discussed"},{"location":"topics/github-trello-integration/#references","text":"Github and Trello Note Use GitHub Power-Up for Trello for attaching pull requests, issues, branches, and more to respective cards. Note Color coded to identify status of the PR such as open, merged, failed checks. Note You can also associate multiple repositories to one board. This is useful in a case where you are working on both frontend and backend from the same board.","title":"References"},{"location":"topics/github-trello-integration/#add-github-power-up-to-your-trello-board","text":"","title":"Add Github Power-Up to your Trello board"},{"location":"topics/github-trello-integration/#add-repository","text":"","title":"Add repository"},{"location":"topics/github-trello-integration/#attach-your-pull-request-to-trello-card","text":"PR now shows on the card. Color coded to show status of pull request A comment linking back to Trello will be automatically added to your PR","title":"Attach your Pull Request to Trello card"},{"location":"topics/github-trello-integration/#conclusion","text":"Trello is a powerful but easy to use communication tool for your team. You can extend it's capabilities by further integrating your Github repository using other platforms such as Zapier to automatically create tasks from Github issues, among other features.","title":"Conclusion"},{"location":"topics/heroku-point-dns/","text":"Heroku PointDNS Setup \u00b6 Heroku doesn't offer nameservers. This means we must use a 3rd party DNS provider in order to assign a custom domain to an app. There are a number of ways to do this; the method described here is compatible with the Lambda Labs domain name process. Objective \u00b6 Establish a path to adding a custom domain for projects hosted on Heroku for free while remaining Labs Compliant. Info Heroku requires a credit card on file to activate PointDNS (as well as to support more than 3-4 apps at a time). PointDNS is free but it does need to be an actual credit card. The card will not be charged; it doesn't even have to have any funds available. Technologies \u00b6 heroku cli PointDNS add-on References \u00b6 Installing Heroku CLI PointDNS Heroku docs on custom domains Info DNS stands for Dynamic Name System. Domain names are resolved using what is known as nameservers. Nameservers are servers that match domain names with targets (IP addresses). Nameservers allow users to visit google.com from anywhere in the world, for instance, and be connected to a google server geographically close to the user. The actual IP address can changes, but the domain name doesn't. Getting Started \u00b6 Find a domain on Namecheap that cost less than $15/year Add the PointDNS Add-on to the production Heroku app (see Notes on PointDNS) > heroku addons:create pointdns:developer -a app-name-fe-prod Add the domain to the Heroku app to get the DNS target > heroku domains:add example.com -a app-name-fe-prod Keep the terminal open. You will need the DNS target which will look something like this Log into PointDNS from Heroku by clicking on the PointDNS Add-on in the Heroku dashboard Click on the domain Edit the CNAME record by clicking the edit button (this will bring up the Edit Zone Record modal) Hostname is the DNS target you created on Step 3 Click on Nameservers, copy 4 nameservers Send a message to your SL with the Domain to be purchased using the template below and 4 nameservers from the PointDNS pool After your SL submits the request, your domain will be purchased in 1-3 days Template for Custom Domain Requests \u00b6 Use this template for submitting custom domain requests to your SL. Example 1 2 3 4 5 6 Domain Name: Name Servers: 1 . 2 . 3 . 4 .","title":"Heroku PointDNS"},{"location":"topics/heroku-point-dns/#heroku-pointdns-setup","text":"Heroku doesn't offer nameservers. This means we must use a 3rd party DNS provider in order to assign a custom domain to an app. There are a number of ways to do this; the method described here is compatible with the Lambda Labs domain name process.","title":"Heroku PointDNS Setup"},{"location":"topics/heroku-point-dns/#objective","text":"Establish a path to adding a custom domain for projects hosted on Heroku for free while remaining Labs Compliant. Info Heroku requires a credit card on file to activate PointDNS (as well as to support more than 3-4 apps at a time). PointDNS is free but it does need to be an actual credit card. The card will not be charged; it doesn't even have to have any funds available.","title":"Objective"},{"location":"topics/heroku-point-dns/#technologies","text":"heroku cli PointDNS add-on","title":"Technologies"},{"location":"topics/heroku-point-dns/#references","text":"Installing Heroku CLI PointDNS Heroku docs on custom domains Info DNS stands for Dynamic Name System. Domain names are resolved using what is known as nameservers. Nameservers are servers that match domain names with targets (IP addresses). Nameservers allow users to visit google.com from anywhere in the world, for instance, and be connected to a google server geographically close to the user. The actual IP address can changes, but the domain name doesn't.","title":"References"},{"location":"topics/heroku-point-dns/#getting-started","text":"Find a domain on Namecheap that cost less than $15/year Add the PointDNS Add-on to the production Heroku app (see Notes on PointDNS) > heroku addons:create pointdns:developer -a app-name-fe-prod Add the domain to the Heroku app to get the DNS target > heroku domains:add example.com -a app-name-fe-prod Keep the terminal open. You will need the DNS target which will look something like this Log into PointDNS from Heroku by clicking on the PointDNS Add-on in the Heroku dashboard Click on the domain Edit the CNAME record by clicking the edit button (this will bring up the Edit Zone Record modal) Hostname is the DNS target you created on Step 3 Click on Nameservers, copy 4 nameservers Send a message to your SL with the Domain to be purchased using the template below and 4 nameservers from the PointDNS pool After your SL submits the request, your domain will be purchased in 1-3 days","title":"Getting Started"},{"location":"topics/heroku-point-dns/#template-for-custom-domain-requests","text":"Use this template for submitting custom domain requests to your SL. Example 1 2 3 4 5 6 Domain Name: Name Servers: 1 . 2 . 3 . 4 .","title":"Template for Custom Domain Requests"},{"location":"topics/https-ssl-support/","text":"HTTPS/SSL Support \u00b6 Heroku does not offer https be default for free tier dynos with custom domains. One way around this is to utilize Cloudflare as a \"proxy\" between your domain's servers and your users. This method relies on PointDNS to provide nameservers connected to the Heroku DNS target. Cloudflare exists as a abstraction layer in between PointDNS and the domain name. Objective \u00b6 We will walk through the basic steps of setting up an account on Cloudflare and connecting it to your custom Heroku domain. Requirements \u00b6 Lambda purchased custom domain PointDNS connected to target Heroku app cloudflare.com account References \u00b6 What is SSL? What is Cloudflare? Getting Started \u00b6 Create a free account on Cloudflare.com Enter your site's custom domain name, then continue Select the free plan, then continue Copy the two new name servers provided Send the new name servers to your SL with the template, below Example 1 2 3 4 Domain name: your-domain-name.com Cloudflare Name servers: 1. 2.","title":"Setup HTTPS/SSL"},{"location":"topics/https-ssl-support/#httpsssl-support","text":"Heroku does not offer https be default for free tier dynos with custom domains. One way around this is to utilize Cloudflare as a \"proxy\" between your domain's servers and your users. This method relies on PointDNS to provide nameservers connected to the Heroku DNS target. Cloudflare exists as a abstraction layer in between PointDNS and the domain name.","title":"HTTPS/SSL Support"},{"location":"topics/https-ssl-support/#objective","text":"We will walk through the basic steps of setting up an account on Cloudflare and connecting it to your custom Heroku domain.","title":"Objective"},{"location":"topics/https-ssl-support/#requirements","text":"Lambda purchased custom domain PointDNS connected to target Heroku app cloudflare.com account","title":"Requirements"},{"location":"topics/https-ssl-support/#references","text":"What is SSL? What is Cloudflare?","title":"References"},{"location":"topics/https-ssl-support/#getting-started","text":"Create a free account on Cloudflare.com Enter your site's custom domain name, then continue Select the free plan, then continue Copy the two new name servers provided Send the new name servers to your SL with the template, below Example 1 2 3 4 Domain name: your-domain-name.com Cloudflare Name servers: 1. 2.","title":"Getting Started"},{"location":"topics/review-apps-heroku/","text":"Setting Up Review Apps On Heroku \u00b6 Objective \u00b6 The Review Apps Heroku Pipeline would allow one not to have to use the Heroku remote to push to the staging server on Heroku. Overall, this should allow one to increase workload capacity since the Review Apps Pipeline could cut out the learning curve of deploying to Heroku via the Heroku remote through the CLI. Heroku deploys the HEAD commit of the branch that the associated Pull Request is created on. When the branch is updated Heroku redeploys to the connected repo on the Review Apps Pipeline with your latest commit. In summary, this guide will help you have a better understanding of what Review Apps on Heroku does and how to set it up for your Github repo. Technologies Discussed \u00b6 Heroku Review Apps Pipeline Setting Up Review Apps Steps \u00b6 1.Create a Pipeline by going to your Heroku dashboard, going to new , clicking the dropdown, and clicking on create new Pipeline 2.Make sure to add the repo you want to connect the Review Apps Pipeline to 3.Once on the Pipeline Dashboard click Enable Review Apps 4.Then config Reviews Apps with your preferred settings Automatically create review apps for new PRs Destroy stale review apps automatically - set to preferred time frame References \u00b6 For more information about setting up Review Apps on Heroku click here","title":"Review Apps"},{"location":"topics/review-apps-heroku/#setting-up-review-apps-on-heroku","text":"","title":"Setting Up Review Apps On Heroku"},{"location":"topics/review-apps-heroku/#objective","text":"The Review Apps Heroku Pipeline would allow one not to have to use the Heroku remote to push to the staging server on Heroku. Overall, this should allow one to increase workload capacity since the Review Apps Pipeline could cut out the learning curve of deploying to Heroku via the Heroku remote through the CLI. Heroku deploys the HEAD commit of the branch that the associated Pull Request is created on. When the branch is updated Heroku redeploys to the connected repo on the Review Apps Pipeline with your latest commit. In summary, this guide will help you have a better understanding of what Review Apps on Heroku does and how to set it up for your Github repo.","title":"Objective"},{"location":"topics/review-apps-heroku/#technologies-discussed","text":"Heroku Review Apps Pipeline","title":"Technologies Discussed"},{"location":"topics/review-apps-heroku/#setting-up-review-apps-steps","text":"1.Create a Pipeline by going to your Heroku dashboard, going to new , clicking the dropdown, and clicking on create new Pipeline 2.Make sure to add the repo you want to connect the Review Apps Pipeline to 3.Once on the Pipeline Dashboard click Enable Review Apps 4.Then config Reviews Apps with your preferred settings Automatically create review apps for new PRs Destroy stale review apps automatically - set to preferred time frame","title":"Setting Up Review Apps Steps"},{"location":"topics/review-apps-heroku/#references","text":"For more information about setting up Review Apps on Heroku click here","title":"References"},{"location":"topics/writing-standards/","text":"Writing Standards \u00b6 Note If you add, remove or change the name of a topic document, be sure to update the mkdocs.yml file Topics section Format \u00b6 Each guide will follow the following template: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # <Title> ## Guide Objective summary statement ### technologies discussed - list of technologies used - optional glossary ### references - list of links ## Chapters - ... - ... Title \u00b6 A short and descriptive title to refer to the topic covered in guide Guide Objective \u00b6 A simple, clear overview of what the reader should gain by reading the guide. Summary of what the guide intends to cover. a brief list of technologies the guide focuses on Chapters \u00b6 One or more chapters for walking the user through steps to completion. Linting \u00b6 All submissions must be linted using markdownlint by David Anson CLI VS Code Note: There's a configuration file in the root of the repository that has some small tweaks to the format.","title":"Writing Standards"},{"location":"topics/writing-standards/#writing-standards","text":"Note If you add, remove or change the name of a topic document, be sure to update the mkdocs.yml file Topics section","title":"Writing Standards"},{"location":"topics/writing-standards/#format","text":"Each guide will follow the following template: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # <Title> ## Guide Objective summary statement ### technologies discussed - list of technologies used - optional glossary ### references - list of links ## Chapters - ... - ...","title":"Format"},{"location":"topics/writing-standards/#title","text":"A short and descriptive title to refer to the topic covered in guide","title":"Title"},{"location":"topics/writing-standards/#guide-objective","text":"A simple, clear overview of what the reader should gain by reading the guide. Summary of what the guide intends to cover. a brief list of technologies the guide focuses on","title":"Guide Objective"},{"location":"topics/writing-standards/#chapters","text":"One or more chapters for walking the user through steps to completion.","title":"Chapters"},{"location":"topics/writing-standards/#linting","text":"All submissions must be linted using markdownlint by David Anson CLI VS Code Note: There's a configuration file in the root of the repository that has some small tweaks to the format.","title":"Linting"}]}